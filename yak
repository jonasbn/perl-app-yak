#!/usr/bin/env perl

use strict;
use warnings;
use JSON; # from_json
use YAML::Tiny;
use Crypt::Digest::SHA256 qw(sha256_file_hex); # Provided by CryptX
use Env qw($HOME);
use Data::Dumper;
use File::Find;
use List::MoreUtils qw(any);
use Term::ANSIColor qw(:constants);
use Parse::Gitignore;
use English; # $PROGRAM_NAME

our $VERSION = '1.0.0';

our $verbose = 1;

open my $checksums_fh, '<', "$HOME/.config/yak/checksums.json";
my $checksum_json = join '', <$checksums_fh>;
close $checksums_fh;

my $checksums = from_json($checksum_json);


# Open the config
my $config_yaml = YAML::Tiny->read("$HOME/.config/yak/config.yml");

my $pg = Parse::Gitignore->new('./.gitignore');

print Dumper $pg;

print "$PROGRAM_NAME : $VERSION\n";

if (defined $ARGV[0]) {
    my $file_checksum = sha256_file_hex($ARGV[0]);
} else {
    find(\&wanted, qw(.));
}

sub wanted {
    my $file = $_;

    #print "Examinging: $File::Find::dir\n";
    #print "Examinging: $_\n";
    #print "Examinging: $File::Find::name\n\n";

    # TODO: the path from Parse::Gitignore and File::Find are not compatible out of the box
    if ($pg->ignored($_)) {
        #print STDERR "Attempting to ignore $file\n";
        return;
    }

    if (-f $file and any { $file eq $_ } keys %{$checksums} ) {

        my $checksum = $checksums->{$file};
        my $file_checksum = sha256_file_hex($file);

        if ($file_checksum eq $checksum) {
            print STDERR  GREEN, "üëçüèª$File::Find::name\n", RESET;
        } else {
            print STDERR RED, "‚ùóÔ∏è$File::Find::name\n", RESET;
        }
    } elsif (-f $file and $verbose) {
        print STDERR FAINT, "  $File::Find::name skipped\n", RESET;
    }
}

exit 0;

__END__

=pod

=for markdown

 :warning: WARNING! :warning:

This this project and it's components are WIP and _alpha_ software, everything is far from working and farther from finished

=end markdown

=head1 yak

yak - script to help with yak shaving for example GitHub projects

=head1 DESCRIPTION

The C<yak> I<shaver> can scan a directory for files, which can be classified as yaks in need of shaving. Meaning files which are maintained else where are often copy-pasted.

The file names can be configured in a central configuration file, like this:

F<$HOME/.config/yak/checksums.json>

    {
        "CONTRIBUTING.md": "15701b6b27e1d49ca6636f2695cfc49b6622c7152f74b14becc53850811db54f"
    }

If a file is encountered, which matches the name, the checksum of the encountered file is calculated and is compared to the checksum listed in the central file.

=over

=item * If they match, everything is okay

=item * If they differ, the difference has to be addressed

=back

The recommendation is to have the checksum in the central file, reflect the authoritative revision and hence you can overwrite the file in the directory you where inspecting.

Alternatively to specifying a checksum, you can specify a file URL:

{
    "MANIFEST.SKIP": "file://MANIFEST.SKIP"
}

The file pointed to has to be available in: F<$HOME/.config/yak/files>

Then C<yak> can calculate the checksum dynamically, based on the reference file and can based on invocation copy the reference file to the location of the evaluated file in the case where the two differ.

=head1 CONFIGURATION

C<yak> can be configured using the following paramters:

=over

=item * C<gitignore>, which enables the use of a local gitignore file

=back

=head1 ISSUE REPORTING

If you experience any issues with C<yak> report these via GitHub. Please read  L<the issue reporting template|https://github.com/jonasbn/yak/blob/master/.github/ISSUE_TEMPLATE.md>.

=head1 DEVELOPMENT

If you want to contribute to C<yak> please read the L<Contribution guidelines|https://github.com/jonasbn/yak/blob/master/CONTRIBUTING.md>
and follow L<the pull request guidelines|https://github.com/jonasbn/yak/blob/master/.github/PULL_TEMPLATE.md>.

=head1 MOTIVATION

Much of what I do is yak shaving. For you who are not familiar with the term:

    "[MIT AI Lab, after 2000: orig. probably from a Ren & Stimpy episode.]
    Any seemingly pointless activity which is actually necessary to solve
    a problem which solves a problem which, several levels of recursion
    later, solves the real problem you're working on."

REF: L<The Jargon File|http://www.catb.org/~esr/jargon/html/Y/yak-shaving.html>

Used commonly for repetive and boring work, required to reach a certain goal.

=head1 AUTHOR

=over

=item jonasbn E<lt>jonasbn@cpan.orgE<gt>

=back

=head1 COPYRIGHT

C<yak> is (C) by Jonas B. Nielsen, (jonasbn) 2018-2019

Image used on the C<yak> L<website|https://jonasbn.github.io/yak/> is under copyright by L<Shane Aldendorff|https://unsplash.com/photos/3b3O75X0Jzg>

=head1 LICENSE

C<yak> is released under the MIT License

=cut
