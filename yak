#!/usr/bin/env perl

use strict;
use warnings;
use v5.10; # say

use JSON; # from_json
use YAML::Tiny;
use Crypt::Digest::SHA256 qw(sha256_file_hex); # Provided by CryptX
use Env qw($HOME);
use Data::Dumper;
use File::Find;
use List::MoreUtils qw(any);
use Term::ANSIColor qw(:constants);
use English; # $PROGRAM_NAME
use Getopt::Long; # GetOptions
use Cwd; # getcwd

use constant FALSE   => 0;
use constant TRUE    => 1;
use constant SUCCESS => 0;
use constant FAILURE => 1;

our $VERSION = '1.0.0';

my $default_checksums_src  = "$HOME/.config/yak/checksums.json";
my $default_config_file    = "$HOME/.config/yak/config.yml";

my $debug_flag       = FALSE;
my $nodebug_flag     = FALSE;
my $verbosity_flag   = FALSE;
my $silent_flag      = FALSE;
my $noconfig_flag    = FALSE;
my $nochecksums_flag = FALSE;
my $about_flag       = FALSE;
my $help_flag        = FALSE;
my $nocolor_flag     = FALSE;
my $color_flag       = FALSE;
my $noemoji_flag     = FALSE;
my $emoji_flag       = FALSE;
my $rv               = SUCCESS;
my $checksums_src    = '';
my $config_file      = '';

GetOptions ('debug'       => \$debug_flag,
            'nodebug'     => \$nodebug_flag,
            'verbose'     => \$verbosity_flag,
            'noconfig'    => \$noconfig_flag,
            'config=s'    => \$config_file,
            'silent'      => \$silent_flag,
            'nochecksums' => \$nochecksums_flag,
            'checksums=s' => \$checksums_src,
            'nocolor'     => \$nocolor_flag,
            'color'       => \$color_flag,
            'noemoji'     => \$noemoji_flag,
            'emoji'       => \$emoji_flag,
            'about'       => \$about_flag,
            'help'        => \$help_flag,
) or die "Error in command line arguments\n";

# Reading the config
my $config;
if ($noconfig_flag) {
    #$config;
} else {
    if ($config_file) {
        $config = YAML::Tiny->read($config_file);
    } else {
        $config = YAML::Tiny->read($default_config_file);
    }
}

my $verbose = _set_verbose($verbosity_flag, $silent_flag, $config);
my $debug = _set_debug($debug_flag, $nodebug_flag, $config);
my $color = _set_color($color_flag, $nocolor_flag, $config);
my $emoji = _set_emoji($emoji_flag, $noemoji_flag, $config);

# Reading the checksum data
my $checksums_file = '';
if ($nochecksums_flag) {
    my $cwd = getcwd();
    $checksums_file = "$cwd/.yaksums.json";
} else {

    if ($checksums_src) {
        $checksums_file = $checksums_src;
    } else {
        $checksums_file = $default_checksums_src;
    }
}

open (my $checksums_fh, '<', $checksums_file) or die "Unable to read checksum file: $checksums_file - $!";
my $checksum_json = join '', <$checksums_fh>;
close $checksums_fh;

my $checksums = from_json($checksum_json);

if ($about_flag) {
    say "$PROGRAM_NAME version $VERSION";
    say '';
    if (not $noconfig_flag) {
        say "Using configuration located at: $config_file" ;
        say 'Configured with:';
        say '- debug: '.$config->[0]->{debug} if $config->[0]->{debug};
        say '- verbose: '.$config->[0]->{verbose} if $config->[0]->{verbose};
        say '- color: '.$config->[0]->{color} if $config->[0]->{color};
        say '';
    }
    say "Using data source located at: $checksums_file";
    say '';
    say 'Invoked with:';
    say '--debug'                    if $debug_flag;
    say '--nodebug'                  if $nodebug_flag;
    say '--verbose'                  if $verbosity_flag;
    say '--noconfig'                 if $noconfig_flag;
    say '--config $config_file'      if $config_file;
    say '--silent'                   if $silent_flag;
    say '--nochecksums'              if $nochecksums_flag;
    say '--checksums $checksums_src' if $checksums_src;
    say '--nocolor'                  if $nocolor_flag;
    say '--color'                    if $color_flag;
    say '--noemoji'                  if $noemoji_flag;
    say '--emoji'                    if $emoji_flag;
    say '--about'                    if $about_flag;

    exit $rv;
}

if ($help_flag) {
    say "$PROGRAM_NAME version $VERSION";
    say '';
    say "$PROGRAM_NAME [options]";
    say '';
    say 'Options';
    say '';
    say '--debug: debug output';
    say '--nodebug: disabling debug output, if configured';
    say '--verbose: more verbose output';
    say '--noconfig: ignore \$HOME/.config/.yak/config.yml';
    say '--config <file>: specify alternative to \$HOME/.config/.yak/config.yml';
    say '--silent: suppress all output and rely on return value';
    say '--nochecksums: ignore \$HOME/.config/.yak/checksums.json and use local .yaksums';
    say '--checksums <file>: specify alternative to \$HOME/.config/.yak/checksums.json';
    say '--nocolor: disable colorized output';
    say '--color: enable colorized output';
    say '--noemoji: disable emoji output';
    say '--emoji: enable emoji output';
    say '--about: emit configuration and invocation description';

    exit $rv;
}

if (defined $ARGV[0]) {
    my $file_checksum = sha256_file_hex($ARGV[0]);
} else {
    find(\&_wanted, qw(.));
}

exit $rv;

sub _wanted {
    my $file = $_;

    if ($debug) {
        say STDERR "Examining: $File::Find::dir";
        say STDERR "Examining: $_";
        say STDERR "Examining: $File::Find::name";
    }

    if (-f $file and any { $file eq $_ } keys %{$checksums} ) {

        my $checksum;
        my $assertion = $checksums->{$file};

        if ($assertion =~ m/file/i) {
            my ($filename) = $assertion =~ s{file:\/\/(.*)}{$1};
            $checksum = sha256_file_hex("$HOME/.config/yak/files/$assertion");
        } else {
            $checksum = $assertion;
        }

        my $file_checksum = sha256_file_hex($file);

        if ($file_checksum eq $checksum) {
            _print_success($color, $emoji, $File::Find::name) unless $silent_flag;
        } else {
            _print_failure($color, $emoji, $File::Find::name)  unless $silent_flag;
            $rv = FAILURE;
        }
    } elsif (-f $file and $verbose) {
        _print_skip($color, $emoji, $File::Find::name) unless $silent_flag;
    }
}

sub _print_success {
    my ($color, $emoji, $filename, $silent_flag) = @_;

    my $success_emoji = '👍🏻';
    if (not $emoji) {
        $success_emoji = '';
    }

    unless ($silent_flag) {
        if ($color) {
            say GREEN, $success_emoji . $filename . RESET;
        } else {
            say $success_emoji . $filename;
        }
    }
}

sub _print_failure {
    my ($color, $emoji, $filename, $silent_flag) = @_;

    my $failure_emoji = '❗️';
    if (not $emoji) {
        $failure_emoji = '';
    }

    unless ($silent_flag) {
        if ($color) {
            say  RED, $failure_emoji . $filename . RESET;
        } else {
            say $failure_emoji . $filename;
        }
    }
}

sub _print_skip {
    my ($color, $emoji, $filename, $silent_flag) = @_;

    my $skip_emoji = '  ';
    if (not $emoji) {
        $skip_emoji = '';
    }

    unless ($silent_flag) {
        if ($color) {
            say FAINT, $skip_emoji . "$filename skipped", RESET;
        } else {
            say $skip_emoji, "$filename skipped";
        }
    }
}

sub _set_verbose {
    my ($verbosity_flag, $silent_flag, $config) = @_;

    if ($silent_flag) {
        return FALSE;
    }

    return $verbosity_flag || _is_verbosity_config_true($config) || FALSE;
}

sub _set_debug {
    my ($debug_flag, $nodebug_flag, $config) = @_;

    if ($nodebug_flag) {
        return FALSE;
    }

    return $debug_flag || _is_debug_config_true($config) || FALSE;
}

sub _set_color {
    my ($color_flag, $nocolor_flag, $config) = @_;

    if ($nocolor_flag) {
        return FALSE;
    }

    if ($color_flag) {
        return TRUE;
    }

    return _is_color_config_false($config)?FALSE:TRUE;
}

sub _set_emoji {
    my ($emoji_flag, $noemoji_flag, $config) = @_;

    if ($noemoji_flag) {
        return FALSE;
    }

    if ($emoji_flag) {
        return TRUE;
    }

    return _is_emoji_config_false($config)?FALSE:TRUE;
}

sub _is_emoji_config_false {
    my $config = shift;

    if ($config and $config->[0]->{emoji}) {
        return $config->[0]->{emoji} eq 'false'?TRUE:FALSE;
    } else {
        return FALSE;
    }
}

sub _is_color_config_false {
    my $config = shift;

    if ($config and $config->[0]->{color}) {
        return $config->[0]->{color} eq 'false'?TRUE:FALSE;
    } else {
        return FALSE;
    }
}

sub _is_debug_config_true {
    my $config = shift;

    if ($config and $config->[0]->{debug}) {
        return $config->[0]->{debug} eq 'true'?TRUE:FALSE;
    } else {
        return FALSE;
    }
}

sub _is_verbosity_config_true {
    my $config = shift;

    if ($config and $config->[0]->{verbose}) {
        return $config->[0]->{verbose} eq 'true'?TRUE:FALSE;
    } else {
        return FALSE;
    }
}
